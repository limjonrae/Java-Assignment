Assignment page : 

// Importing necessary packages
package assignment;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.regex.*;

public class Assignment extends JFrame {
    private JPanel panel; // Panel to hold buttons
    private JButton registerButton; // Button to navigate to registration page
    private JButton loginButton; // Button to navigate to login page

    public Assignment() {
        setTitle("Welcome to APU"); // Set window title
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Close application on window close
        setSize(600, 400); // Set window size
        setLocationRelativeTo(null); // Center window on screen

        panel = new JPanel(new GridBagLayout()); // Create panel with GridBagLayout
        GridBagConstraints gbc = new GridBagConstraints(); // Constraints for GridBagLayout
        gbc.gridx = 0; // Set grid x-coordinate
        gbc.gridy = GridBagConstraints.RELATIVE; // Set grid y-coordinate to be relative
        gbc.insets = new Insets(10, 10, 10, 10); // Set padding around components

        registerButton = new JButton("Register"); // Create register button
        loginButton = new JButton("Login"); // Create login button

        // ActionListener for register button
        registerButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose(); // Close current window
                new RegistrationPage(); // Open registration page
            }
        });

        // ActionListener for login button
        loginButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose(); // Close current window
                new LoginPage(); // Open login page
            }
        });

        panel.add(registerButton, gbc); // Add register button to panel
        panel.add(loginButton, gbc); // Add login button to panel

        add(panel); // Add panel to frame
        setVisible(true); // Make frame visible
    }

    //main method
    public static void main(String[] args) {
        new Assignment();
    }
}

class RegistrationPage extends JFrame {
    private JTextField usernameField; // Text field for username input
    private JPasswordField passwordField; // Password field for password input
    private JComboBox<String> userTypeDropdown; // Dropdown for selecting user type
    private JButton registerButton; // Button to register user
    private JButton backButton; // Button to back user

    // Constructor for RegistrationPage
    public RegistrationPage() {
        setTitle("Registration"); // Set window title
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Close window on dispose
        setSize(400, 350); // Set window size
        setLocationRelativeTo(null); // Center window on screen

        JPanel panel = new JPanel(new GridLayout(6, 2, 10, 10)); // Create panel with GridLayout

         // Components for registration form
        JLabel usernameLabel = new JLabel("Username:");
        usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        passwordField = new JPasswordField();
        JLabel userTypeLabel = new JLabel("User Type:");
        String[] userTypes = {"User", "Admin", "Technician"};
        userTypeDropdown = new JComboBox<>(userTypes);
        registerButton = new JButton("Register");
        backButton = new JButton("Back");

        // ActionListener for register button
        registerButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());
                String userType = (String) userTypeDropdown.getSelectedItem();
                if (isPasswordValid(password)) {
                    if (registerUser(username, password, userType)) {
                        JOptionPane.showMessageDialog(null, "Registration successful!");
                        dispose(); // Close current window
                        new Assignment(); // Open main page
                    } else {
                        JOptionPane.showMessageDialog(null, "Registration failed! Please try again.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Password does not meet requirements!");
                }
            }
        });

        // ActionListener for back button
        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose(); // Close current window
                new Assignment(); // Open main page
            }
        });

        // Add components to panel
        panel.add(usernameLabel);
        panel.add(usernameField);
        panel.add(passwordLabel);
        panel.add(passwordField);
        panel.add(userTypeLabel);
        panel.add(userTypeDropdown);
        panel.add(registerButton);
        panel.add(backButton);

        add(panel); // Add panel to frame
        setVisible(true); // Make frame visible
    }

    // Method to validate password strength
    private boolean isPasswordValid(String password) {
        // Password must contain at least one alphabet, one number, and one special symbol (!@#$%&_)
        String regex = "^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&_])[A-Za-z\\d@$!%*?&_]{8,}$";
        return Pattern.compile(regex).matcher(password).matches();
    }

    // Method to register user
    private boolean registerUser(String username, String password, String userType) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader("user_database.txt"));
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.contains("Username: " + username)) {
                    reader.close();
                    return false; // Username already exists
                }
            }
            reader.close();
            BufferedWriter writer = new BufferedWriter(new FileWriter("user_database.txt", true));
            writer.write("Username: " + username + ", Password: " + password + ", Role: " + userType + "\n");
            writer.close();
            return true;
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }
    }
}

// Class for the login page
class LoginPage extends JFrame {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton;
    private JButton backButton;

    // Constructor for the login page
    public LoginPage() {
        setTitle("Login"); // Setting the title of the window
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Setting the title of the window
        setSize(400, 300); // Setting window size
        setLocationRelativeTo(null); // Centering the window on the screen

        // Creating a panel with GridLayout for the login interface
        JPanel panel = new JPanel(new GridLayout(4, 2, 10, 10));

        // Creating labels, text fields, and buttons for username, password, and login
        JLabel usernameLabel = new JLabel("Username:");
        usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        passwordField = new JPasswordField();
        loginButton = new JButton("Login");
        backButton = new JButton("Back");

        // Adding action listeners to the login and back buttons
        loginButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Retrieving the entered username and password
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());
                // Checking if either username or password fields are empty
                if (username.isEmpty() || password.isEmpty()) {
                    // Displaying an error message if any field is empty
                    JOptionPane.showMessageDialog(null, "Please fill in all fields.");
                } else {
                     // Retrieving the user type based on the entered username and password
                    String userType = getUserType(username, password);
                    
                    // Checking if user type is retrieved successfully
                    if (userType != null) {
                         // Displaying a success message if login is successful
                        JOptionPane.showMessageDialog(null, "Login successful!");
                        dispose(); // Closing the login page
                        
                        // Opening a new page based on the user type
                        switch (userType) {
                            case "Admin":
                                new AdminPage(); // Opening AdminPage
                                break;
                            case "User":
                                new UserPage(); // Opening UserPage
                                break;
                            case "Technician":
                                new TechnicianPage(); // Opening TechnicianPage
                                break;
                            default:
                                break;
                        }
                    } else {
                        // Displaying an error message if login fails (invalid username or password)
                        JOptionPane.showMessageDialog(null, "Login failed! Invalid username or password.");
                    }
                }
            }
        });
        
        // Adding action listener to the back button
         backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose(); // Closing the login page
                new Assignment(); // Opening the main application window (Assignment)
            }
        });

         // Adding components to the panel
        panel.add(usernameLabel);
        panel.add(usernameField);
        panel.add(passwordLabel);
        panel.add(passwordField);
        panel.add(loginButton);
        panel.add(backButton);

        add(panel); // Adding the panel to the frame
        setVisible(true); // Making the frame visible
    }
 
    // Method to retrieve user type based on entered username and password
    private String getUserType(String username, String password) {
        // Attempt to read from the user database file
        try {
            BufferedReader reader = new BufferedReader(new FileReader("user_database.txt"));
            String line;
            while ((line = reader.readLine()) != null) {
                 // Check if the line contains the entered username and password
                if (line.contains("Username: " + username) && line.contains("Password: " + password)) {
                    int startIndex = line.indexOf("Role: ");
                    if (startIndex != -1) {
                        startIndex += 6; // Move to the beginning of the role
                        String userType = line.substring(startIndex);
                        reader.close();
                        return userType.trim(); // Return the user type
                    }
                }
            }
            reader.close();
        } catch (IOException ex) {
            ex.printStackTrace(); // Print stack trace if an exception occurs
        }
        return null; // Return null if user type cannot be determined
    }
}

--------------------------------------------------------------------------------------------------------------------

adminPage : 

package assignment;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class AdminPage extends JFrame {
    private JPanel panel;
    private JButton viewFeedbacksButton;
    private JButton technicianManagementButton;
    private JButton serviceManagementButton;
    private JButton manageRegistrationButton; // Added manage registration button
    private JButton logoutButton;
    private List<Feedback> feedbacks;

    public AdminPage() {
        setTitle("Admin Page");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(600, 400);
        setLocationRelativeTo(null);

        panel = new JPanel(new GridLayout(5, 1)); // Increased grid layout to accommodate the new button
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = GridBagConstraints.RELATIVE;
        gbc.insets = new Insets(10, 10, 10, 10);

        viewFeedbacksButton = new JButton("View Feedbacks");
        technicianManagementButton = new JButton("Technician Management");
        serviceManagementButton = new JButton("Service Management");
        manageRegistrationButton = new JButton("Manage Registration"); // Added manage registration button
        logoutButton = new JButton("Logout");

        viewFeedbacksButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                feedbacks = new ArrayList<>();
                try {
                    feedbacks = getFeedbacksFromFile();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(AdminPage.this, "Error reading feedbacks.");
                    return;
                }
                displayFeedbacks(feedbacks);
            }
        });

        technicianManagementButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(AdminPage.this, "Technician Management displayed!");
            }
        });

        serviceManagementButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(AdminPage.this, "Service Management displayed!");
            }
        });

        manageRegistrationButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Display registration data
                displayRegistrations();
            }
        });

        logoutButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                new LoginPage();
            }
        });

        panel.add(viewFeedbacksButton);
        panel.add(technicianManagementButton);
        panel.add(serviceManagementButton);
        panel.add(manageRegistrationButton); // Added manage registration button to the panel
        panel.add(logoutButton);

        add(panel);
        setVisible(true);
    }

    private List<Feedback> getFeedbacksFromFile() throws IOException {
        List<Feedback> feedbacks = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("feedbacks.txt"))) {
            String line;
            String name = null;
            String phoneNumber = null;
            StringBuilder feedback = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                if (line.isEmpty()) {
                    if (name != null && phoneNumber != null && !feedback.toString().isEmpty()) {
                        feedbacks.add(new Feedback(name, phoneNumber, feedback.toString()));
                        name = null;
                        phoneNumber = null;
                        feedback = new StringBuilder();
                    }
                } else {
                    if (name == null) {
                        name = line;
                    } else if (phoneNumber == null) {
                        phoneNumber = line;
                    } else {
                        feedback.append(line).append("\n");
                    }
                }
            }
            if (name != null && phoneNumber != null && !feedback.toString().isEmpty()) {
                feedbacks.add(new Feedback(name, phoneNumber, feedback.toString()));
            }
        }
        return feedbacks;
    }

    private void displayFeedbacks(List<Feedback> feedbacks) {
        StringBuilder feedbackString = new StringBuilder();
        for (Feedback feedback : feedbacks) {
            feedbackString.append("Name: ").append(feedback.getName()).append("\n");
            feedbackString.append("Phone Number: ").append(feedback.getPhoneNumber()).append("\n");
            feedbackString.append("Feedback: ").append(feedback.getFeedback()).append("\n\n");
        }
        JOptionPane.showMessageDialog(this, feedbackString.toString());
    }

    // Method to retrieve and display registration data
    private void displayRegistrations() {
        try (BufferedReader reader = new BufferedReader(new FileReader("user_database.txt"))) {
            StringBuilder registrationData = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                registrationData.append(line).append("\n");
            }
            JOptionPane.showMessageDialog(this, registrationData.toString(), "Registration Data", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error reading registration data.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    public static class Feedback {
        private String name;
        private String phoneNumber;
        private String feedback;

        public Feedback(String name, String phoneNumber, String feedback) {
            this.name = name;
            this.phoneNumber = phoneNumber;
            this.feedback = feedback;
        }

        public String getName() {
            return name;
        }

        public String getPhoneNumber() {
            return phoneNumber;
        }

        public String getFeedback() {
            return feedback;
        }
    }

    public static void main(String[] args) {
        new AdminPage();
    }
}

----------------------------------------------------------------------------------------------------------------------

userPage : 

package assignment;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;

public class UserPage extends JFrame {
    private JPanel panel;
    private JButton makeBookingButton;
    private JButton feedbackButton;
    private JButton logoutButton;
    private JButton orderStatusButton;

    public UserPage() {
        setTitle("User Page");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(600, 400);
        setLocationRelativeTo(null);

        panel = new JPanel(new GridLayout(4, 1));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = GridBagConstraints.RELATIVE;
        gbc.insets = new Insets(10, 10, 10, 10);

        makeBookingButton = new JButton("Make Booking");
        feedbackButton = new JButton("View Feedback");
        orderStatusButton = new JButton("View Order Status");
        logoutButton = new JButton("Logout");

        makeBookingButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                new BookingPage();
            }
        });

        feedbackButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Code to view and submit feedback
                String name = JOptionPane.showInputDialog(null, "Enter your name:");
                String phoneNumber = JOptionPane.showInputDialog(null, "Enter your phone number:");
                String feedback = JOptionPane.showInputDialog(null, "Enter your feedback:");

                if (name != null && phoneNumber != null && feedback != null) {
                    // Save feedback to file
                    saveFeedback(name, phoneNumber, feedback);
                    JOptionPane.showMessageDialog(null, "Feedback submitted successfully!");
                }
            }
        });

        orderStatusButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                new OrderStatusPage();
            }
        });

        logoutButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Code to logout
                dispose();
                new LoginPage();
            }
        });

        panel.add(makeBookingButton);
        panel.add(feedbackButton);
        panel.add(orderStatusButton);
        panel.add(logoutButton);

        add(panel);
        setVisible(true);
    }

    private void saveFeedback(String name, String phoneNumber, String feedback) {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("feedbacks.txt", true));
            writer.write("Name: " + name + "\n");
            writer.write("Phone Number: " + phoneNumber + "\n");
            writer.write("Feedback: " + feedback + "\n\n");
            writer.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) {
        UserPage userPage = new UserPage();
        userPage.setVisible(true);
    }
}

class BookingPage extends JFrame {

    // declaration of components
    private JTextField customerField;
    private JTextField roomNumberField;
    private JTextField blockField;
    private JTextField problemField;
    private JRadioButton time9AMRadioButton;
    private JRadioButton time12PMRadioButton;
    private JRadioButton time3PMRadioButton;
    private JComboBox<String> dayComboBox;
    private JComboBox<String> monthComboBox;
    private JComboBox<String> yearComboBox;
    private JButton backButton;
    private JButton proceedButton;
    private JComboBox<String> paymentMethodComboBox;

    public BookingPage() {
        setTitle("Booking Page");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(500, 300);
        setLayout(new GridLayout(11, 2));
        getContentPane().setBackground(new Color(173, 216, 230));

        Font font = new Font("Courier New", Font.BOLD, 13);

        createCustomerField(font);
        createRoomNumberField(font);
        createBlockField(font);
        createProblemField(font);
        createTimeRadioButtons(font);
        createDateComboBoxes(font);
        createPaymentMethodComboBox(font);
        createButtons(font);

        setVisible(true);
    }

    private void createCustomerField(Font font) {
        JLabel customerLabel = new JLabel("Customer Name:");
        customerField = new JTextField();
        customerField.setColumns(15);
        customerField.setFont(font);
        add(customerLabel);
        add(customerField);
    }

    private void createProblemField(Font font) {
        JLabel problemLabel = new JLabel("Problem:");
        problemField = new JTextField();
        problemField.setFont(font);
        problemField.setColumns(15);
        add(problemLabel);
        add(problemField);
    }

    private void createRoomNumberField(Font font) {
        JLabel roomNumberLabel = new JLabel("Room Number:");
        roomNumberField = new JTextField();
        roomNumberField.setFont(font);
        roomNumberField.setColumns(15);
        add(roomNumberLabel);
        add(roomNumberField);
    }

    private void createBlockField(Font font) {
        JLabel blockLabel = new JLabel("Block:");
        blockField = new JTextField();
        blockField.setFont(font);
        blockField.setColumns(15);
        add(blockLabel);
        add(blockField);
    }

    private void createTimeRadioButtons(Font font) {
        JLabel timeLabel = new JLabel("Cleaning Time:");
        time9AMRadioButton = new JRadioButton("9:00 AM");
        time12PMRadioButton = new JRadioButton("12:00 PM");
        time3PMRadioButton = new JRadioButton("3:00 PM");
        time9AMRadioButton.setFont(font);
        time12PMRadioButton.setFont(font);
        time3PMRadioButton.setFont(font);
        ButtonGroup timeGroup = new ButtonGroup();
        timeGroup.add(time9AMRadioButton);
        timeGroup.add(time12PMRadioButton);
        timeGroup.add(time3PMRadioButton);
        add(timeLabel);
        add(time9AMRadioButton);
        add(new JLabel(""));
        add(time12PMRadioButton);
        add(new JLabel(""));
        add(time3PMRadioButton);
    }

    private void createDateComboBoxes(Font font) {
        JLabel dateLabel = new JLabel("Date:");
        String[] days = new String[31];
        for (int i = 0; i < 31; i++) {
            days[i] = Integer.toString(i + 1);
        }
        dayComboBox = new JComboBox<>(days);

        String[] months = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
        monthComboBox = new JComboBox<>(months);

        String[] years = {"2022", "2023", "2024", "2025"};
        yearComboBox = new JComboBox<>(years);

        dayComboBox.setFont(font);
        monthComboBox.setFont(font);
        yearComboBox.setFont(font);

        add(dateLabel);
        add(dayComboBox);
        add(monthComboBox);
        add(yearComboBox);
    }

    private void createPaymentMethodComboBox(Font font) {
        JLabel paymentMethodLabel = new JLabel("Payment Method:");
        String[] paymentMethods = {"Cash", "Credit Card"};
        paymentMethodComboBox = new JComboBox<>(paymentMethods);
        paymentMethodComboBox.setFont(font);

        add(paymentMethodLabel);
        add(paymentMethodComboBox);
    }

    private void createButtons(Font font) {
        backButton = new JButton("Back");
        proceedButton = new JButton("Proceed");

        backButton.setFont(font);
        proceedButton.setFont(font);

        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                new UserPage();
            }
        });

        proceedButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                String customer = customerField.getText();
                String roomNumber = roomNumberField.getText();
                String block = blockField.getText();
                String problem = problemField.getText();
                String time = "";
                if (time9AMRadioButton.isSelected()) {
                    time = "9:00 AM";
                } else if (time12PMRadioButton.isSelected()) {
                    time = "12:00 PM";
                } else if (time3PMRadioButton.isSelected()) {
                    time = "3:00 PM";
                }
                String day = (String) dayComboBox.getSelectedItem();
                String month = (String) monthComboBox.getSelectedItem();
                String year = (String) yearComboBox.getSelectedItem();
                String paymentMethod = (String) paymentMethodComboBox.getSelectedItem();

                saveBookingData(customer, roomNumber, block, time, problem, day, month, year, paymentMethod);

                BillingPage billingPage = new BillingPage(customer, roomNumber, block, time, problem, day, month, year, paymentMethod);
                billingPage.setVisible(true);
                dispose();
            }
        });

        add(backButton);
        add(proceedButton);
    }

    private void saveBookingData(String customer, String roomNumber, String block, String time, String problem,
                                 String day, String month, String year, String paymentMethod) {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("booking_data.txt", true));
            // Append data to the text file
            writer.write("Customer: " + customer + "\n");
            writer.write("Room Number: " + roomNumber + "\n");
            writer.write("Block: " + block + "\n");
            writer.write("Cleaning Time: " + time + "\n");
            writer.write("Problem: " + problem + "\n");
            writer.write("Date: " + day + " " + month + " " + year + "\n");
            writer.write("Payment Method: " + paymentMethod + "\n");
            writer.write("---------------------------\n");
            writer.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
}

class BillingPage extends JFrame {
    private JButton backButton;
    private JButton payButton;
    private String customer;
    private String roomNumber;
    private String block;
    private String time;
    private String problem;
    private String day;
    private String month;
    private String year;
    private String paymentMethod;

    public BillingPage(String customer, String roomNumber, String block, String time, String problem, String day, String month, String year, String paymentMethod) {
        this.customer = customer;
        this.roomNumber = roomNumber;
        this.block = block;
        this.time = time;
        this.problem = problem;
        this.day = day;
        this.month = month;
        this.year = year;
        this.paymentMethod = paymentMethod;

        setTitle("Payment Billing Page");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(500, 300);
        setLayout(new GridLayout(13, 2));
        getContentPane().setBackground(new Color(173, 216, 230));

        Font font = new Font("Courier New", Font.BOLD, 13);

        JLabel customerLabel = new JLabel("Customer Name:");
        JLabel roomNumberLabel = new JLabel("Room Number:");
        JLabel blockLabel = new JLabel("Block:");
        JLabel timeLabel = new JLabel("Cleaning Time:");
        JLabel problemLabel = new JLabel("Problem:");
        JLabel dateLabel = new JLabel("Date:");
        JLabel paymentMethodLabel = new JLabel("Payment Method:");

        JLabel customerValueLabel = new JLabel(customer);
        JLabel roomNumberValueLabel = new JLabel(roomNumber);
        JLabel blockValueLabel = new JLabel(block);
        JLabel timeValueLabel = new JLabel(time);
        JLabel problemValueLabel = new JLabel(problem);
        JLabel dateValueLabel = new JLabel(day + " " + month + " " + year);
        JLabel paymentMethodValueLabel = new JLabel(paymentMethod);

        customerLabel.setFont(font);
        roomNumberLabel.setFont(font);
        blockLabel.setFont(font);
        timeLabel.setFont(font);
        problemLabel.setFont(font);
        dateLabel.setFont(font);
        paymentMethodLabel.setFont(font);

        customerValueLabel.setFont(font);
        roomNumberValueLabel.setFont(font);
        blockValueLabel.setFont(font);
        timeValueLabel.setFont(font);
        problemValueLabel.setFont(font);
        dateValueLabel.setFont(font);
        paymentMethodValueLabel.setFont(font);

        backButton = new JButton("Back");
        payButton = new JButton("Pay");
        backButton.setFont(font);
        payButton.setFont(font);

        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                new BookingPage();
            }
        });

        payButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Perform payment process
                JOptionPane.showMessageDialog(null, "Payment successful via " + paymentMethod);
                if (paymentMethod.equals("Cash") || paymentMethod.equals("Credit Card")) {
                    // Proceed to Order Status page
                    dispose();
                    new UserPage();
                }
            }
        });

        add(customerLabel);
        add(customerValueLabel);
        add(roomNumberLabel);
        add(roomNumberValueLabel);
        add(blockLabel);
        add(blockValueLabel);
        add(timeLabel);
        add(timeValueLabel);
        add(problemLabel);
        add(problemValueLabel);
        add(dateLabel);
        add(dateValueLabel);
        add(paymentMethodLabel);
        add(paymentMethodValueLabel);
        add(backButton);
        add(payButton);

        setVisible(true);
    }
}

class OrderStatusPage extends JFrame {
    private JTextArea orderStatusTextArea;

    public OrderStatusPage() {
        setTitle("Order Status");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(500, 300);
        setLocationRelativeTo(null);

        orderStatusTextArea = new JTextArea();
        orderStatusTextArea.setEditable(false);

        JScrollPane scrollPane = new JScrollPane(orderStatusTextArea);
        add(scrollPane);

        displayBookingData();

        setVisible(true);
    }

    private void displayBookingData() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader("booking_data.txt"));
            String line;
            StringBuilder bookingData = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                bookingData.append(line).append("\n");
            }
            orderStatusTextArea.setText(bookingData.toString());
            reader.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
}

-------------------------------------------------------------------------------------------------------------------

technician page : 

package assignment;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

/**
 *
 * @author theness_
 */
class TechnicianPage extends JFrame {
    public TechnicianPage() {
        setTitle("Technician Page");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLocationRelativeTo(null);

        JLabel label = new JLabel("Welcome to Technician Page!");
        label.setHorizontalAlignment(SwingConstants.CENTER);

        add(label);

        setVisible(true);
    }
}
